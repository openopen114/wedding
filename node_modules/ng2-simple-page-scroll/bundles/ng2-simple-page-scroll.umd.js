(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('@angular/platform-browser'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/router', '@angular/platform-browser', '@angular/common'], factory) :
    (factory((global.ng2 = global.ng2 || {}, global.ng2.simple = global.ng2.simple || {}, global.ng2.simple.page = global.ng2.simple.page || {}, global.ng2.simple.page.scroll = global.ng2.simple.page.scroll || {}),global.ng.core,global.ng.router,global.ng.platform-browser,global.ng.common));
}(this, (function (exports,_angular_core,_angular_router,_angular_platformBrowser,_angular_common) { 'use strict';

var SimplePageScrollConfig = (function () {
    function SimplePageScrollConfig() {
    }
    SimplePageScrollConfig.defaultScrollOffset = 0;
    return SimplePageScrollConfig;
}());

var SimplePageScrollService = (function () {
    function SimplePageScrollService(document) {
        this.document = document;
        this.body = document.body;
    }
    SimplePageScrollService.prototype.scrollToElement = function (targetElementOrId, pageScrollOffset) {
        var anchorTarget = this.determineElement(targetElementOrId);
        if (anchorTarget !== null) {
            setScrollTop(this.body);
            setScrollTop(this.document.documentElement);
            setScrollTop(this.document.body.parentNode);
        }
        function setScrollTop(container) {
            if (container && typeof container.scrollTop !== 'undefined') {
                container.scrollTop =
                    anchorTarget.offsetTop -
                        anchorTarget.scrollTop +
                        anchorTarget.clientTop +
                        (pageScrollOffset || SimplePageScrollConfig.defaultScrollOffset);
            }
        }
    };
    SimplePageScrollService.prototype.determineElement = function (targetElementOrId) {
        if (typeof targetElementOrId === 'string') {
            return this.document.getElementById(targetElementOrId.substr(1));
        }
        else {
            return targetElementOrId;
        }
    };
    SimplePageScrollService.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    SimplePageScrollService.ctorParameters = [
        { type: Document, decorators: [{ type: _angular_core.Inject, args: [_angular_platformBrowser.DOCUMENT,] },] },
    ];
    return SimplePageScrollService;
}());

var SimplePageScroll = (function () {
    function SimplePageScroll(router, simplePageScrollService) {
        this.router = router;
        this.simplePageScrollService = simplePageScrollService;
        this.pageScrollOffset = null;
        this.pageScrollFinish = new _angular_core.EventEmitter();
        this.shouldScroll = false;
    }
    SimplePageScroll.prototype.handleClick = function (clickEvent) {
        var _this = this;
        if (this.routerLink && this.router !== null && this.router !== undefined) {
            // wait for router to finish navigating
            // Note: the change event is also emitted when navigating to the current route again
            var subscription_1 = this.router.events.subscribe(function (routerEvent) {
                if (routerEvent instanceof _angular_router.NavigationEnd) {
                    subscription_1.unsubscribe();
                    _this.shouldScroll = true;
                }
                else if (routerEvent instanceof _angular_router.NavigationError || routerEvent instanceof _angular_router.NavigationCancel) {
                    subscription_1.unsubscribe();
                    _this.pageScrollFinish.emit(false);
                }
            });
        }
        else {
            // no router action; scroll immediately
            this.scrollAndEmitEvent();
        }
        return false; // to preventDefault()
    };
    SimplePageScroll.prototype.scrollAndEmitEvent = function () {
        this.simplePageScrollService.scrollToElement(this.href, this.pageScrollOffset);
        this.shouldScroll = false;
        this.pageScrollFinish.emit(true);
    };
    SimplePageScroll.prototype.ngAfterViewChecked = function () {
        if (this.shouldScroll) {
            this.scrollAndEmitEvent();
        }
    };
    SimplePageScroll.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[simplePageScroll]',
                    host: {
                        '(click)': 'handleClick($event)',
                    }
                },] },
    ];
    /** @nocollapse */
    SimplePageScroll.ctorParameters = [
        { type: _angular_router.Router, },
        { type: SimplePageScrollService, },
    ];
    SimplePageScroll.propDecorators = {
        'routerLink': [{ type: _angular_core.Input },],
        'href': [{ type: _angular_core.Input },],
        'pageScrollOffset': [{ type: _angular_core.Input },],
        'pageScrollFinish': [{ type: _angular_core.Output },],
    };
    return SimplePageScroll;
}());

var Ng2SimplePageScrollModule = (function () {
    function Ng2SimplePageScrollModule() {
    }
    Ng2SimplePageScrollModule.forRoot = function () {
        return {
            ngModule: Ng2SimplePageScrollModule,
            providers: [
                { provide: SimplePageScrollService, useClass: SimplePageScrollService }
            ]
        };
    };
    Ng2SimplePageScrollModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    imports: [_angular_common.CommonModule],
                    declarations: [SimplePageScroll],
                    exports: [SimplePageScroll]
                },] },
    ];
    /** @nocollapse */
    Ng2SimplePageScrollModule.ctorParameters = [];
    return Ng2SimplePageScrollModule;
}());

exports.Ng2SimplePageScrollModule = Ng2SimplePageScrollModule;
exports.SimplePageScroll = SimplePageScroll;
exports.SimplePageScrollService = SimplePageScrollService;
exports.SimplePageScrollConfig = SimplePageScrollConfig;

Object.defineProperty(exports, '__esModule', { value: true });

})));
